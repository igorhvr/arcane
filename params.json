{"name":"Arcane","tagline":"Don't let *them* read your mail. Encrypt it now.","body":"Arcane is a set of tools which allows you to encrypt all your existing\r\nunencrypted mails and all your new incoming mail with a GPG key so that\r\nonly you can read them.\r\n\r\n## Why do I need this? ##\r\n\r\nMany email providers store your emails for you on their servers, so\r\nthat you can read them anywhere. This also means that your provider,\r\nanyone who hacks the server and the police (in case the server is\r\nseized) can read your private emails.\r\n\r\nIf all your emails are GPG encrypted, only you can read them because\r\nonly you have access to your secret GPG key.\r\n\r\n## What could go wrong? ##\r\n\r\n* If you lose your secret GPG key you can not decrypt your emails anymore.\r\nYour emails will be lost. Therefore make a backup of your secret GPG key (i.e. print it).\r\n* After encrypting your emails you will (probably) not be able search\r\nthe content of your emails  (because they are encrypted). Searching\r\nfor sender or subject should still work.\r\n* The metadata of your emails (sender,subject,date) will not be encrypted.\r\n* Your emails will not be more secure during transit (because they are encyrpted\r\nafter arriving at the destination). Tell your friends and colleagues to\r\nencrypt their mails _before_ sending them.\r\n\r\n## Install ##\r\n\r\n### Dependancies ###\r\n* imaplib (Included in the Python Standard Library)\r\n* python-gpgme https://launchpad.net/pygpgme (Should be available in Debian and Ubuntu repositories)\r\n\r\n### Debian ###\r\n    # aptitude install python python-gpgme\r\n    # mkdir -p /usr/local/lib && cd /usr/local/lib\r\n    # git clone https://github.com/n0g/arcane.git\r\n    # cd ../bin \r\n    # ln -s ../lib/arcane/arcane\r\n    # ln -s ../lib/arcane/arcane-encrypt-mail\r\n\r\nAfterwards you should be able to call 'arcane' and 'arcane-encrypt-mail'\r\nand get a usage output.\r\n\r\n## Step-by-Step Configuration ##\r\n\r\n### Generate GPG Key ###\r\nTo generate a new GPG key the following command will guide you through\r\nthe key generation process:\r\n\r\n\r\n    $ gpg --gen-key\r\n\r\nYou will need to use an RSA key for encryption (do not choose any option\r\nthat says 'sign only'). A secure key size is 2048 bit and above, 1024\r\nbit RSA keys are considered insecure.\r\n\r\nAfter the generation process your keypair should be visible with the\r\nfollowing command:\r\n\r\n\r\n    $ gpg --list-secret-keys\r\n\r\n\r\n### Copy Public GPG Key to Server ###\r\n(If you do not want automatic encryption of incoming emails or do not\r\nhave access to your procmail configuration, then you can skip to\r\n'Encrypting Existing Mails')\r\n\r\nExport your key into a .pub file:\r\n\r\n\r\n    $ gpg --export --armor 77FA1F54 > robin-jankins.pub\r\n\r\n\r\nCopy the public key to your mailserver:\r\n\r\n\r\n    $ scp robin-jankins.pub robin.jankins@mail.example.com:~/\r\n\r\n\r\nImport the public key to your keyring on the mailserver:\r\n\r\n\r\n    $ gpg --import robin-jankins.pub\r\n\r\n\r\n### Create procmail Configuration ###\r\nYour procmail configuration file probably lies at '~/.procmailrc'. To\r\nencrypt all your incoming mail you will need to add a rule at the top:\r\n\r\n\r\n    # encryption\r\n    :0 fw\r\n    * <300000\r\n    | arcane-encrypt-mail --key 77FA1F54\r\n\r\n\r\nThe 'f' tells procmail to use this rule as a filter (i.e. the filtered\r\nemail will continue to match other rules). The 'w' tells procmail to\r\ncontinue with the unfiltered mail if arcane-encrypt-mail exits with an\r\nerror (i.e. the mail is already encrypted).\r\n\r\nNote that you will either have to set the PATH variable so that the\r\narcane-encrypt-mail script will be found.\r\n\r\n\r\n### Encrypt Existing Mails ###\r\nUsually the hostname of your mailserver and your user credentials will\r\nbe enough to start arcane. In this example the hostname is\r\n'mail.example.com', SSL needs to be used and the user is\r\n'robin.jankins'.\r\n\r\nYour GPG key identifier should be in the list you get after executing\r\n'gpg --list-secret-keys'.\r\n\r\nNow you have all the details for starting arcane:\r\n\r\n\r\n    $ arcane -h mail.example.com -s -u robin.jankins -k 77FA1F54\r\n\r\n## Quick Start ##\r\n\r\n### Usage ###\r\n    arcane -h hostname [-p port] [-s] -u username [-d] -k identifier\r\n        -h,--hostname\tHostname of IMAP4 compatible mailserver\r\n        -p,--port\tOptional port number of IMAP4 service\r\n        -s,--ssl\tOptional SSL flag (changes default port to 993)\r\n        -u,--username\tUsername that should be used for authentication\r\n        -k,--key\tPublic key Identifier that will be used to encrypt the mails\r\n        -m,--mailbox\tOptional Mailbox argument which specifies which mailbox should be encrypted\r\n        -d,--decrypt\tOptional argument for decryption (useful for key rollover)\r\n\r\n\r\n### Examples ###\r\nEncrypt all emails on an SSL IMAP compatible mailserver for the user n0g\r\nwith the public pgp key 77FA1F54\r\n\r\n\r\n     ./arcane --hostname mail.example.com --ssl --username robin.jankins --key 77FA1F54\r\n\r\nEncrypt only the 'office' mailbox on an SSL IMAP compatible mailserver\r\n\r\n\r\n     ./arcane --hostname mail.example.com --ssl --mailbox office --username robin.jankins --key 77FA1F54\r\n\r\nExample .procmailrc File if you want to encrypt all incoming mails with procmail\r\n\r\n\r\n    DEFAULT=$HOME/Maildir\r\n    SHELL=/bin/bash\r\n    PATH=/usr/local/bin:/usr/bin\r\n\r\n    # encryption\r\n    :0 fw\r\n    * <300000\r\n    | arcane-encrypt-mail --key 77FA1F54\r\n\r\n    # your bunch of filter rules\r\n    # ...\r\n\r\n    # default rule\r\n    :0\r\n    $DEFAULT\r\n\r\n## Known Issues ##\r\n* read/unread state is not preserved (all emails are displayed as read after using this tool)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}