#! /usr/bin/env python
"""Arcane 

This encryption tool connects to a specified IMAP4 compatible mail
server, authenticates with a given username/password and encrypts all
unencrypted mail in the users mailbox.

The MIT License (MIT)

Copyright (c) 2013 Matthias Fassl <mf@n0g.at>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""
import sys
import getopt
import getpass
import imap

DEFAULT_SSL_PORT = 993
DEFAULT_PORT = 143

def main(argv=None):
	if argv==None:
		argv = sys.argv

	# Initial Arguments
	port = 0
	hostname = ""
	username = ""
	key = ""
	mailbox = ""
	ssl = False

	# parse arguments
	try:
		optlist, args = getopt.getopt(sys.argv[1:],"h:p:su:k:m:",["hostname=", "port=","ssl","username=","key=","mailbox="])
	except getopt.GetoptError as err:
		usage()
		return 2


	for o, a in optlist:
		if o in ("-h","--hostname"):
			hostname = a
		elif o in ("-p","--port"): 
			port = int(a)
		elif o in ("-s","--ssl"):
			ssl = True
		elif o in ("-u","--username"):
			username = a
		elif o in ("-k","--key"):
			key = a
		elif o in ("-m","--mailbox"):
			mailbox = a
		else:
			usage()
			return 1

	if port == 0:
		if ssl == True:
			port = DEFAULT_SSL_PORT
		else:
			port = DEFAULT_PORT

	if hostname == "":
		print >> sys.stderr,"Connection not possible without hostname\n"
		usage()
		return 1

	if username == "":
		print >> sys.stderr,"Authentication not possible without username\n"
		usage()
		return 1

	if key == "":
		print >> sys.stderr,"Encryption not possible without key identifier\n"
		usage()
		return 1
		
	# open connection
	conn = imap.IMAPConnection(hostname,port,ssl,username,getpass.getpass())

	# Encrypt all mails
	for mbox in conn:
		if mailbox != "" and not mailbox in mbox.mailbox:
			continue
		print mbox
		for mail in mbox:
			if not mail.isEncrypted():
				mail.encryptPGP(key)
				mail.store()
				sys.stdout.write('.')
			else:
				sys.stdout.write('X')
			sys.stdout.flush()

def usage():
	print >> sys.stderr, "Usage: arcane -h hostname [-p port] [-s] [-m mailbox] -u username"
	print >> sys.stderr, "\t-h,--hostname\tHostname of IMAP4 compatible mailserver"
	print >> sys.stderr, "\t-p,--port\tOptional port number of IMAP4 service"
	print >> sys.stderr, "\t-s,--ssl\tOptional SSL flag (changes default port to 993)"
	print >> sys.stderr, "\t-u,--username\tUsername that should be used for authentication"
	print >> sys.stderr, "\t-k,--key\tPublic key Identifier that will be used to encrypt the mails"
	print >> sys.stderr, "\t-m,--mailbox\tOptional Mailbox that specifies which Mailbox should be encrypted"
	

if __name__  == "__main__":
	sys.exit(main())
